#!/usr/bin/python3

#csv conversion
from typing import Iterable
import pandas as pd
import csv
#.docx creation
import docx
from docx.oxml.shared import OxmlElement
from docx.oxml.ns import qn
from docx import Document
from docx.text.paragraph import Paragraph
from docx.enum.style import WD_STYLE_TYPE
from docx.shared import Pt
from docx.shared import RGBColor
from docx.oxml.ns import qn
from docx.shared import Mm
from docx.oxml.shared import OxmlElement
#proressbar
from tqdm import tqdm
#file check & path finding
import os
#miscellaneous
import sys


def _convert_to_csv(filename):
    """If there is no "chat.csv" file in the folder, this function will take the "chat.txt" file and convert it into a .csv one"""
    chat = filename.split('/')
    chat = chat[-1]
   
    filename = filename.replace('txt', 'csv')

    #converts .txt in .csv using pandas and splitting each line in tokens
    df=pd.read_csv(chat,header=None,error_bad_lines=False,encoding='utf8')
    df= df.drop(0)
    df.columns=['Date', 'Chat']
    Message= df["Chat"].str.split("-", n = 1, expand = True) 
    df['Date']=df['Date'].str.replace(",","")
    df['Time']=Message[0]
    df['Text']=Message[1]
    Message1= df["Text"].str.split(":", n = 1, expand = True) 
    df['Text']=Message1[1]
    df['Name']=Message1[0]
    df=df.drop(columns=['Chat'])
    df['Text']=df['Text'].str.lower()
    df['Text'] = df['Text'].str.replace('<media omessi>','**Foto o Video**')
    df['Text'] = df['Text'].str.replace('hai eliminato questo messaggio','Messaggio Eliminato')
    df['Text'] = df['Text'].str.replace('Questo messaggio Ã¨ stato eliminato','Messaggio Eliminato')    
    df.to_csv(filename,index=False)

def _create_user1_paragraph(d, text, alignment):
    """This function will create a message based on the format of User1: green shadow ad right alignment."""

    # Add a paragraph
    p = d.add_paragraph()
    p.alignment = 2
    p.paragraph_format.line_spacing = 1.5

    #Paragraph format
    paragraph_format = p.paragraph_format
    paragraph_format.line_spacing = Pt(15)
    paragraph_format.space_after = Pt(3)

    # Add text to paragraph reference
    txt = text
    run = p.add_run(txt)

    # Get the XML tag
    tag = run._r

    # Create XML element
    shd = OxmlElement('w:shd')

    # Add attributes to the element
    shd.set(qn('w:val'), 'clear')
    shd.set(qn('w:color'), 'auto')
    shd.set(qn('w:fill'), '5CFA78')

    # Set the font size - this is important! Without this step the
    # tag.rPr value below will be None.
    run.font.size = Pt(10)
    run.font.name = 'Ubuntu'

    tag.rPr.append(shd)

def _create_user2_paragraph(d, text, alignment):
    """This function will create a message based on the format of User2: white shadow ad left alignment."""

    # Add a paragraph
    p = d.add_paragraph()
    p.alignment = 0
    p.paragraph_format.line_spacing = 1.5

    #Paragraph format
    paragraph_format = p.paragraph_format
    paragraph_format.line_spacing = Pt(15)
    paragraph_format.space_after = Pt(3)

    # Add text to paragraph reference
    txt = text
    run = p.add_run(txt)

    # Get the XML tag
    tag = run._r

    # Create XML element
    shd = OxmlElement('w:shd')

    # Add attributes to the element
    shd.set(qn('w:val'), 'clear')
    shd.set(qn('w:color'), 'auto')
    shd.set(qn('w:fill'), 'FFFFFF')

    # Set the font size - this is important! Without this step the
    # tag.rPr value below will be None.
    run.font.size = Pt(10)
    run.font.name = 'Ubuntu'

    tag.rPr.append(shd)

def _create_day_paragraph(d, text):
    """This function will create a message based on the format of Day: no shadow and center alignment."""
    p = d.add_paragraph()
    p.paragraph_format.line_spacing = 1
    p.alignment = 1
    p.add_run(text)

def _parse_date(date):
    """This function will refine the date, adding the literla month and the full year. this function must updated every 100 years to display the correct century"""

    parsed_date = date.split('/')
    refined_date = ''
    if len(parsed_date) < 3:
        return refined_date
    elif parsed_date[1] == '01':
        refined_date = parsed_date[0]+' Gennaio 20'+parsed_date[2]
    elif parsed_date[1] == '02':
        refined_date = parsed_date[0]+' Febbraio 20'+parsed_date[2]
    elif parsed_date[1] == '03':
        refined_date = parsed_date[0]+' Marzo 20'+parsed_date[2]
    elif parsed_date[1] == '04':
        refined_date = parsed_date[0]+' Aprile 20'+parsed_date[2]
    elif parsed_date[1] == '05':
        refined_date = parsed_date[0]+' Maggio 20'+parsed_date[2]
    elif parsed_date[1] == '06':
        refined_date = parsed_date[0]+' Giugno 20'+parsed_date[2]
    elif parsed_date[1] == '07':
        refined_date = parsed_date[0]+' Luglio 20'+parsed_date[2]
    elif parsed_date[1] == '08':
        refined_date = parsed_date[0]+' Agosto 20'+parsed_date[2]
    elif parsed_date[1] == '09':
        refined_date = parsed_date[0]+' Settembre 20'+parsed_date[2]
    elif parsed_date[1] == '10':
        refined_date = parsed_date[0]+' Ottobre 20'+parsed_date[2]
    elif parsed_date[1] == '11':
        refined_date = parsed_date[0]+' Novembre 20'+parsed_date[2]
    elif parsed_date[1] == '12':
        refined_date = parsed_date[0]+' Dicembre 20'+parsed_date[2]

    return refined_date

def _create_document():
    """this function creates a .docx document that will be the canva for the messages. It is made in such a way to resemble Whatsapp's theme"""

    d = Document()
    document = Document()
    section = d.sections[0]

    #set the dimensions of the page: A4 with large side margins
    section.page_height = Mm(297)
    section.page_width = Mm(210)
    section.left_margin = Mm(50)
    section.right_margin = Mm(50)
    section.top_margin = Mm(25.4)
    section.bottom_margin = Mm(25.4)
    section.header_distance = Mm(12.7)
    section.footer_distance = Mm(12.7)

    # Now Add below children to root xml tree
    # create xml element using OxmlElement
    shd = OxmlElement('w:background')
    # Add attributes to the xml element
    shd.set(qn('w:color'), 'F5F4EF') #black color
    shd.set(qn('w:themeColor'), 'text1')
    shd.set(qn('w:themeTint'), 'F2')
    # Add background element at the start of Document.xml using below
    d.element.insert(0,shd)
    # Add displayBackgroundShape element to setting.xml
    shd1 = OxmlElement('w:displayBackgroundShape')
    d.settings.element.insert(0,shd1)

    

    file = csv.reader(open('chat.csv', 'r'))

    #automatically finds the two users
    user1 = ''
    user2 = ''
    i = 0

    for line in file:
        if i <= 3:
            i = i+1 
            continue
        if user1 == '':
            user1 = line[3]
        if line[3] != user1:
            user2 = line[3]
            break
    
    #composing the document
    d.add_heading('Chat con'+user2, 0)

    i = 0
    date = ''
    for line in tqdm(file, desc="Parsing messages..."):
        if date != line[0]:
            date = line[0]
            _create_day_paragraph(d, _parse_date(date))
        if line[3] == user1:
            _create_user1_paragraph(d, line[2]+' - '+line[1], 2)
        elif line[3] == user2:
            _create_user2_paragraph(d,  line[1]+' - '+line[2], 0)
        i = i+1

        #temporary limit in the loop for testing purposes
        # if i == 1000:
        #     break
    
    print('\nDone!')

    d.save('chat.docx')

def main(argv):

    print('CSV file not found, converting chat.txt in chat.csv...')
    _convert_to_csv(argv)
    print('\nAll ok now, creating document...\n')
    _create_document()

if __name__ == "__main__":

    fn = sys.argv
    
    if len(fn) > 2:
        print("Too many arguments: run wp_converter -h to see the syntax")
    elif len(fn) < 2:
        print("Too few arguments: run wp_converter -h to see the syntax")
    elif fn[1] == '-h':
        print("Usage:\n\n\twp_converter -options/filename\n\nOptions:\n\n\t-h                Shows this help message\n\n\tfilename          create a docx chat file from the given filename\n\nCopyright 2021 - NumenMirus")
    else:
        fn = fn[1]
        if os.path.exists(fn):
            filepath = os.path.realpath(fn)
            main(filepath)
        else:
            print('Cannot find "' + fn + '" in folder, please add the chat source')